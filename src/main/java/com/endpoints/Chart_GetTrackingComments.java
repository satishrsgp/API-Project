package com.endpoints;

import java.util.ArrayList;
import java.util.HashMap;

import org.testng.asserts.SoftAssert;

import com.testscripts.BaseTest;
import com.utils.DatabaseConnection;
import com.utils.FinalAssertions;
import com.utils.JsonListArray;
import com.utils.Log;

public class Chart_GetTrackingComments 
{
	public static Boolean chart_GetTrackingComments_Test(HashMap<String, String> parameters, String strResponse, String strUniqueJsonToken, SoftAssert softAssert)
	{
		Boolean status=false;

		if(!strResponse.isEmpty() && !strResponse.contains("is not valid for Guid"))
		{
			try
			{
				String strQuery = "select los.signoff_id as id, los.order_id as orderId, imn.person_id as personId, imn.ordering_provider as providerId, los.author_name as authorName, "
						+ "case when los.delegate_ind='Y' then pm.description + ' ('+um.last_name+', '+um.first_name+')' else pm.description end as authorDisplayName, "
						+ "um.last_name+', '+um.first_name as userName, case when los.delegate_ind='Y' then 'true' else 'false' end AS isDelegate,los.create_timestamp AS createTimestamp,"
						+ "los.create_timestamp_tz AS createTimestampTimezone, los.signoff_comment AS comment,los.tracking_type AS type,los.generated_by AS generatedBy, "
						+ "case when los.auto_generated='Y' then 'true' else 'false' end AS isAutoGenerated "
						+ "from lab_order_signoff los  "
						+ "INNER JOIN imm_nor AS imn ON los.order_id = imn.order_num  "
						+ "INNER JOIN user_mstr AS um ON los.created_by = um.user_id  "
						+ "INNER JOIN provider_mstr AS pm ON los.provider_id = pm.provider_id  "
						+ "WHERE (los.order_id = '" + parameters.get("orderId") + "')  "
						+ "AND (imn.person_id = '" + parameters.get("personId") + "')  "
						+ "AND (imn.enterprise_id = '" + System.getProperty("LoggedInEnterpriseId") + "') AND (imn.practice_id = '" + System.getProperty("LoggedInPracticeId") + "')";
				
				String[] jsonMetaData = {"id", "orderId", "personId", "providerId", "authorName", "authorDisplayName", "userName", "isDelegate", "createTimestamp", 
						"createTimestampTimezone","comment","type","generatedBy", "isAutoGenerated"};

				try
				{	
					ArrayList<Object> jsonList = JsonListArray.computeJsonList(jsonMetaData, strResponse, strUniqueJsonToken);
					Log.info("JSON LIST is :\n" + jsonList);
					status = FinalAssertions.assertResponseCount(DatabaseConnection.statementExecution(BaseTest.connNGA, strQuery), strResponse, "$..id", jsonList);
				} 
				catch (Exception e)
				{
					e.printStackTrace();
					Log.info("Error in Test Class and the detail are : \n" + e.getMessage());
					softAssert.fail("Error in Test Script please look at logs");
					//objHandler.setStrRequestStatus("Fail");
				}
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
		}
		else
		{
			status = true;
		}
		return status;
	}
}
